# -*- coding: utf-8 -*-
"""Image Segmentation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C7af7Mqk2nbvQkP_id7XNYnwbAL_rhNC

# Image Segmentation
"""

!pip install ultralytics torch

from PIL import Image
raw_image = Image.open("Keya.jpg")
raw_image

from utils import resize_image
resized_image = resize_image(raw_image, input_size=1024)
resized_image

import torch

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
device

from ultralytics import YOLO
model = YOLO('FastSAM.pt')

from utils import show_points_on_image

# Define the coordinates for the point in the image
# [x_axis, y_axis]
input_points = [ [450, 450 ] ]
input_labels = [1] # positive point
# Function written in the utils file
show_points_on_image(resized_image, input_points)

# Run the model
results = model(resized_image, device=device, retina_masks=True)

from utils import format_results, point_prompt

results = format_results(results[0], 0)
# Generate the masks
masks, _ = point_prompt(results, input_points, input_labels)

from utils import show_masks_on_image

# Visualize the generated masks
show_masks_on_image(resized_image, [masks])

"""Define 'semantic masks' - three points to be masked."""

# Specify two points in the same image
# [x_axis, y_axis]
input_points = [ [450, 450], [250, 750], [200, 850] ]
# Specify both points as "positive prompt"
input_labels = [1, 1, 1] # both positive points
# Visualize the points defined before
show_points_on_image(resized_image, input_points)

# Run the model
results = model(resized_image, device=device, retina_masks=True)

results = format_results(results[0], 0)
# Generate the masks
masks, _ = point_prompt(results, input_points, input_labels)
# Visualize the generated masks
show_masks_on_image(resized_image, [masks])

"""Identify subsections of the image by adding a negative prompt."""

# Define the coordinates for the regions to be masked
# [x_axis, y_axis]
input_points = [ [450, 450], [250, 750], [200, 850]  ]
input_labels = [0, 1, 1] # negative prompt, positive prompt, positive prompt
# Visualize the points defined above
show_points_on_image(resized_image, input_points, input_labels)

# Run the model
results = model(resized_image, device=device, retina_masks=True)

results = format_results(results[0], 0)
# Generate the masks
masks, _ = point_prompt(results, input_points, input_labels)
# Visualize the generated masks
show_masks_on_image(resized_image, [masks])

"""Prompting with bounding boxes"""

from utils import box_prompt
from utils import show_boxes_on_image

# Set the bounding box coordinates
# [xmin, ymin, xmax, ymax]
input_boxes = [100, 225, 700, 1000]
# Visualize the bounding box defined with the coordinates above
show_boxes_on_image(resized_image, [input_boxes])

"""Now, try to isolate the mask from the total output of the model."""

from utils import box_prompt

results = model(resized_image, device=device, retina_masks=True)

# Generate the masks
masks = results[0].masks.data
masks

# Convert to True/False boolean mask
masks = masks > 0
masks

masks, _ = box_prompt(masks, input_boxes)
# Visualize the masks
show_masks_on_image(resized_image, [masks])

masks

# To visualize, import matplotlib
from matplotlib import pyplot as plt

# Plot the binary mask as an image
plt.imshow(masks, cmap='gray')

